$burgerlicious-color: #333 !default;
$burgerlicious-weight: 2px !default;
$burgerlicious-animation-speed: .5s !default;
$burgerlicious-rotation: 'right' !default; // TODO: Throw error if not left / right

.burgerlicious {

	&.is-open {
		@if $burgerlicious-rotation == 'right' {
			transform: rotate(270deg);
		} @else if $bugerlicious-rotation == 'left' {
			transform: rotate(-270deg);
		}
	}

	&__button {
		position: relative;
		width: 32px;
		height: 32px;
		background: none; // Reset
		border: none; // Reset
		box-shadow: none; // Reset
		cursor: pointer; // Usability
	}

	&__icon {
		transform: rotate(0);
		transition: transform $burgerlicious-animation-speed ease-in-out;
	}

	&__line {
		stroke: $burgerlicious-color;
		stroke-width: $burgerlicious-weight;

		&--top {
			transform: translateY(0) rotate(0);
			transition: transform $burgerlicious-animation-speed ease-in-out;

			.burgerlicious.is-open & {
				@if $burgerlicious-rotation == 'right' {
					transform: translateY(6px) rotate(45deg);
				} @else if $bugerlicious-rotation == 'left' {
					transform: translateY(6px) rotate(-45deg);
				}
			}

		}

		&--middle {
			transform: scaleX(1);
			transition: opacity ( $burgerlicious-animation-speed / 1.5 ) ease-in-out ( $bugerlicious-animation-speed / 3 ),
						transform ( $burgerlicious-animation-speed / 1.5 ) ease-in-out ( $bugerlicious-animation-speed / 3 );

			.burgerlicious.is-open & {
				opacity: 0;
				transform: scaleX(.1);
			}

		}

		&--bottom {
			transform: scaleX(1);
			transition: transform $burgerlicious-animation-speed ease-in-out;

			.burgerlicious.is-open & {
				@if $burgerlicious-rotation == 'right' {
					transform: translateY(-6px) rotate(45deg);
				} @else if $bugerlicious-rotation == 'left' {
					transform: translateY(-6px) rotate(-45deg);
				}
			}

		}

	}

}
